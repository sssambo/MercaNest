;; SSSP Sale Contract V0
;; Handles USDT to SSS token swaps with fixed exchange rate
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/jetton-utils.fc";

;; Storage
;; owner_address: MsgAddress
;; exchange_rate: Integer (fixed point with 6 decimals)
;; sss_balance: Integer (Jetton amount with 6 decimals)
;; usdt_balance: Integer (USDT amount with 6 decimals)

(slice, int, int, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),    ;; owner_address
        ds~load_uint(64),      ;; exchange_rate
        ds~load_coins(),       ;; sss_balance
        ds~load_coins()        ;; usdt_balance
    );
}

() save_data(slice owner_address, int exchange_rate, int sss_balance, int usdt_balance) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_uint(exchange_rate, 64)
        .store_coins(sss_balance)
        .store_coins(usdt_balance)
        .end_cell());
}

;; Checks if sender is the contract owner
() check_owner(slice sender_address, slice owner_address) impure inline {
    throw_unless(401, equal_slices(sender_address, owner_address));
}

;; Calculates SSS tokens to be received based on USDT amount
int calculate_sss_amount(int usdt_amount, int exchange_rate) inline {
    ;; exchange_rate is fixed point with 6 decimals
    return muldiv(usdt_amount, exchange_rate, 1000000);
}

;; Handles incoming USDT transfers for token swap
() handle_usdt_transfer(slice sender_address, int msg_value, slice owner_address, 
                       int exchange_rate, int sss_balance, int usdt_balance) impure {
    int sss_to_send = calculate_sss_amount(msg_value, exchange_rate);
    throw_unless(402, sss_balance >= sss_to_send);

    ;; Update balances
    save_data(owner_address,
             exchange_rate,
             sss_balance - sss_to_send,
             usdt_balance + msg_value);

    ;; Send SSS tokens to sender
    var msg = begin_cell()
        .store_uint(0x18, 6)           ;; nobounce
        .store_slice(sender_address)    ;; destination
        .store_coins(0)                 ;; amount
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::transfer_jetton(), 32)
        .store_uint(0, 64)             ;; query_id
        .store_coins(sss_to_send)      ;; jetton amount
        .store_slice(sender_address)    ;; destination
        .store_slice(sender_address)    ;; response_destination
        .store_uint(0, 1)              ;; custom_payload
        .store_coins(0)                ;; forward_ton_amount
        .store_uint(0, 1);             ;; forward_payload
    send_raw_message(msg.end_cell(), 64); ;; carry remaining value
}

;; Owner functions
() withdraw_tokens(slice sender_address, slice owner_address, int amount, int token_type,
                  int sss_balance, int usdt_balance, int exchange_rate) impure {
    check_owner(sender_address, owner_address);
    
    if (token_type == 0) { ;; SSS withdrawal
        throw_unless(403, sss_balance >= amount);
        save_data(owner_address, exchange_rate, sss_balance - amount, usdt_balance);
    } else { ;; USDT withdrawal
        throw_unless(404, usdt_balance >= amount);
        save_data(owner_address, exchange_rate, sss_balance, usdt_balance - amount);
    }
    
    ;; Send tokens to owner
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(owner_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg.end_cell(), 1);
}

() update_exchange_rate(slice sender_address, slice owner_address, int new_rate,
                       int sss_balance, int usdt_balance) impure {
    check_owner(sender_address, owner_address);
    throw_unless(405, new_rate > 0);
    save_data(owner_address, new_rate, sss_balance, usdt_balance);
}

;; Main entry point for contract
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; Ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; Ignore bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    (slice owner_address, int exchange_rate,
     int sss_balance, int usdt_balance) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_usdt()) {
        handle_usdt_transfer(sender_address, msg_value, owner_address,
                           exchange_rate, sss_balance, usdt_balance);
        return ();
    }

    if (op == op::withdraw()) {
        int amount = in_msg_body~load_coins();
        int token_type = in_msg_body~load_uint(1);
        withdraw_tokens(sender_address, owner_address, amount, token_type,
                       sss_balance, usdt_balance, exchange_rate);
        return ();
    }

    if (op == op::update_rate()) {
        int new_rate = in_msg_body~load_uint(64);
        update_exchange_rate(sender_address, owner_address, new_rate,
                           sss_balance, usdt_balance);
        return ();
    }

    throw(0xffff); ;; Unsupported operation
}

;; Get methods for external calls
int get_exchange_rate() method_id {
    (_, int exchange_rate, _, _) = load_data();
    return exchange_rate;
}

int get_sss_balance() method_id {
    (_, _, int sss_balance, _) = load_data();
    return sss_balance;
}

int get_usdt_balance() method_id {
    (_, _, _, int usdt_balance) = load_data();
    return usdt_balance;
}